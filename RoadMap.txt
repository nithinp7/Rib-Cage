ROADMAP

This is going to remain a loose collection of experiments and features until a coherent game / engine takes
shape

Rendering:
- [ ] Fix acceleration structures for static primitives
- [ ] Impl TLAS refitting for dynamic primitives 
- [ ] Impl BLAS refitting for skinned primitives 

Animation Systems:
- [x] Decouple animation player from Model
- [x] Allow multiple simultaneous animations in single model 
- [ ] requires animation blending logic
- [ ] animation blends: constant, ramps, transitions...
- [ ] Can "glue" blended animations and create "CompoundAnimations"
- [ ] From there "AnimationStateMachine" 
-   abstraction layer to expression async logic of CompoundAnimations, transitions, cycles, etc

Skeletal Anim / Skinning:
- [x] Incorporate joints / weights attributes in Primitive vertex buffer setup
- [...] WIP Setup skeleton / joint heirarchy, inverse bind matrices, etc...

Blendshapes / Morph Targets
- [ ] Morph target support, doesn't sound too complicated
      have multiple meshes and just linearly interpolate based on weights 
      Note: Morph targets can also linearly animate joints, uvs, skinning weights etc
- [ ] Dynamic morph targets?
- [ ] Dynamic morph target weights? (motion matching, deformation matching?)

Skeleton / Rigging:
- What can we do with the rudimentary "SkeletonEditor" prototype...
- Maybe can take core bones / anims from imported animations...
-     and can author interpolated deformation bones, which can be subject to
      physics or otherwise procedural deformations...


gameplay prototype
- rotor animations
- basic flight controller for helicopter
- simple foliage / wind

blocking pipeline work:
- hammer out workflow to export from blender --> Althea
- uv mapping, PBR textures
- ...animations!

blocking systems work:
- rigid body collision detection 
- eventually rigid body physics solver
- generic skinning framework

Future areas to explore:
- procedural animation
- IK solver 
- skeleton / constraint editor
